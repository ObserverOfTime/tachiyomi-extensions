apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "org.jmailen.kotlinter"

def libVersion = libs.versions.extensions.get()[0..2]
def theme = ext.has("extFactory") ? project(":multisrc:$extFactory") : null
def keyStoreFile = System.getenv("KEY_STORE_FILE") ?: "$rootDir/signingkey.jks"
def readmes = projectDir.list { _, name ->
    name == "README.md" || name == "CHANGELOG.md"
}

android {
    namespace "eu.kanade.tachiyomi.extension"

    compileSdkVersion AndroidConfig.compileSdk

    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = ["src"]
            res.srcDirs = ["res"]
            assets.srcDirs = ["assets"]
        }
        release {
            manifest.srcFile "AndroidManifest.xml"
        }
        debug {
            manifest.srcFile "AndroidManifest.xml"
        }
    }

    defaultConfig {
        minSdkVersion AndroidConfig.minSdk
        targetSdkVersion AndroidConfig.targetSdk
        applicationIdSuffix "${parent.name}.${project.name}"
        versionCode extVersionCode + (theme?.baseVersionCode ?: 0)
        versionName "$libVersion.$versionCode"
        base.archivesName = "tachiyomi-$applicationIdSuffix-v$versionName"
        manifestPlaceholders = [
                appName: "Tachiyomi: $extName",
                extClass: extClass,
                extFactory: ext.properties.getOrDefault("extFactory", ""),
                isNsfw: ext.properties.getOrDefault("isNsfw", false) ? 1 : 0,
                hasReadme: readmes.any { it.startsWith("README") } ? 1 : 0,
                hasChangelog: readmes.any { name.startsWith("CHANGELOG") } ? 1 : 0,
        ]
    }

    signingConfigs {
        release {
            storeFile file(keyStoreFile)
            storePassword System.getenv("KEY_STORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
        }
    }

    dependenciesInfo {
        includeInApk = false
    }

    buildFeatures {
        aidl false
        renderScript false
        resValues false
        shaders false
        buildConfig true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-opt-in=kotlinx.serialization.ExperimentalSerializationApi"
    }

    kotlinter {
        experimentalRules = true
        disabledRules = [
            "experimental:argument-list-wrapping",
            "experimental:comment-wrapping",
        ]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(":core"))
    if (theme != null) implementation(theme)
    compileOnly(libs.bundles.common)
}

preBuild.dependsOn(lintKotlin)
lintKotlin.dependsOn(formatKotlin)
